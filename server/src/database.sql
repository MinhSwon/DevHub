

-- ====================================================================
-- PHẦN A: ĐỊNH NGHĨA CÁC KIỂU DỮ LIỆU ENUM (AN TOÀN KHI CHẠY LẠI)
-- ====================================================================

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role_enum') THEN
        CREATE TYPE user_role_enum AS ENUM ('student', 'coach', 'admin');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_status_enum') THEN
        CREATE TYPE user_status_enum AS ENUM ('active', 'suspended', 'pending_verification');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'team_type_enum') THEN
        CREATE TYPE team_type_enum AS ENUM ('club', 'official_team', 'community');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'team_member_role_enum') THEN
        CREATE TYPE team_member_role_enum AS ENUM ('member', 'captain', 'manager');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'team_member_status_enum') THEN
        CREATE TYPE team_member_status_enum AS ENUM ('pending', 'approved', 'rejected');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_type_enum') THEN
        CREATE TYPE event_type_enum AS ENUM ('match', 'practice', 'tournament', 'social');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_status_enum') THEN
        CREATE TYPE event_status_enum AS ENUM ('scheduled', 'ongoing', 'completed', 'cancelled');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'participant_status_enum') THEN
        CREATE TYPE participant_status_enum AS ENUM ('registered', 'checked_in', 'completed');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_team_result_enum') THEN
        CREATE TYPE event_team_result_enum AS ENUM ('win', 'loss', 'draw');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'reaction_type_enum') THEN
        CREATE TYPE reaction_type_enum AS ENUM ('like', 'heart', 'mvp_vote');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'notification_type_enum') THEN
        CREATE TYPE notification_type_enum AS ENUM ('new_comment', 'event_reminder', 'team_invite', 'badge_unlocked');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'media_type_enum') THEN
        CREATE TYPE media_type_enum AS ENUM ('image', 'video');
    END IF;
END$$;


-- ====================================================================
-- PHẦN B: TẠO HÀM TRIGGER ĐỂ TỰ ĐỘNG CẬP NHẬT `updated_at`
-- PostgreSQL không có `ON UPDATE CURRENT_TIMESTAMP`, ta dùng trigger để thay thế.
-- ====================================================================

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ language 'plpgsql';



-- 1. Bảng users
CREATE TABLE IF NOT EXISTS users (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    student_id VARCHAR(20) UNIQUE,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    avatar_url TEXT,
    bio TEXT,
    role user_role_enum NOT NULL DEFAULT 'student',
    status user_status_enum NOT NULL DEFAULT 'pending_verification',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_users_modtime') THEN
        CREATE TRIGGER update_users_modtime
        BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_modified_column();
    END IF;
END$$;


-- 2. Bảng sports
CREATE TABLE IF NOT EXISTS sports (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    icon_url TEXT
);


-- 3. Bảng teams
CREATE TABLE IF NOT EXISTS teams (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    sport_id INT NOT NULL REFERENCES sports(id),
    description TEXT,
    logo_url TEXT,
    type team_type_enum NOT NULL DEFAULT 'community',
    created_by_user_id INT NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_teams_modtime') THEN
        CREATE TRIGGER update_teams_modtime
        BEFORE UPDATE ON teams
        FOR EACH ROW EXECUTE FUNCTION update_modified_column();
    END IF;
END$$;


-- 4. Bảng team_members
CREATE TABLE IF NOT EXISTS team_members (
    team_id INT NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    role team_member_role_enum NOT NULL DEFAULT 'member',
    status team_member_status_enum NOT NULL DEFAULT 'pending',
    joined_at TIMESTAMPTZ,
    PRIMARY KEY (team_id, user_id)
);


-- 5. Bảng events
CREATE TABLE IF NOT EXISTS events (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    sport_id INT NOT NULL REFERENCES sports(id),
    location VARCHAR(200),
    start_time TIMESTAMPTZ NOT NULL,
    end_time TIMESTAMPTZ NOT NULL,
    event_type event_type_enum NOT NULL,
    status event_status_enum NOT NULL DEFAULT 'scheduled',
    max_participants INT,
    created_by_user_id INT NOT NULL REFERENCES users(id),
    created_at TIMESTAMPTZ DEFAULT NOW()
);


-- 6. Bảng event_participants
CREATE TABLE IF NOT EXISTS event_participants (
    event_id INT NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    status participant_status_enum NOT NULL DEFAULT 'registered',
    registered_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (event_id, user_id)
);


-- 7. Bảng event_teams
CREATE TABLE IF NOT EXISTS event_teams (
    event_id INT NOT NULL REFERENCES events(id) ON DELETE CASCADE,
    team_id INT NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
    score INT,
    result event_team_result_enum,
    PRIMARY KEY (event_id, team_id)
);


-- 8. Bảng activities
CREATE TABLE IF NOT EXISTS activities (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL REFERENCES users(id),
    sport_id INT NOT NULL REFERENCES sports(id),
    duration_minutes INT,
    distance_km FLOAT,
    calories_burned INT,
    notes TEXT,
    activity_date DATE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);


-- 9. Bảng posts
CREATE TABLE IF NOT EXISTS posts (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL REFERENCES users(id),
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_posts_modtime') THEN
        CREATE TRIGGER update_posts_modtime
        BEFORE UPDATE ON posts
        FOR EACH ROW EXECUTE FUNCTION update_modified_column();
    END IF;
END$$;


-- 10. Bảng comments
CREATE TABLE IF NOT EXISTS comments (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    post_id INT NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    parent_comment_id INT REFERENCES comments(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_comments_modtime') THEN
        CREATE TRIGGER update_comments_modtime
        BEFORE UPDATE ON comments
        FOR EACH ROW EXECUTE FUNCTION update_modified_column();
    END IF;
END$$;


-- 11. Bảng reactions
CREATE TABLE IF NOT EXISTS reactions (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL REFERENCES users(id),
    reaction_type reaction_type_enum NOT NULL,
    reactable_id INT NOT NULL,
    reactable_type VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (user_id, reactable_id, reactable_type, reaction_type)
);


-- 12. Bảng badges
CREATE TABLE IF NOT EXISTS badges (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    icon_url TEXT,
    criteria_description VARCHAR(255)
);


-- 13. Bảng user_badges
CREATE TABLE IF NOT EXISTS user_badges (
    user_id INT NOT NULL REFERENCES users(id),
    badge_id INT NOT NULL REFERENCES badges(id),
    awarded_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, badge_id)
);


-- 14. Bảng notifications
CREATE TABLE IF NOT EXISTS notifications (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    recipient_user_id INT NOT NULL REFERENCES users(id),
    sender_user_id INT REFERENCES users(id),
    type notification_type_enum NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN NOT NULL DEFAULT FALSE,
    source_id INT,
    source_type VARCHAR(50),
    created_at TIMESTAMPTZ DEFAULT NOW()
);


-- 15. Bảng media
CREATE TABLE IF NOT EXISTS media (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uploaded_by_user_id INT NOT NULL REFERENCES users(id),
    file_url TEXT NOT NULL,
    file_type media_type_enum NOT NULL,
    attachable_id INT,
    attachable_type VARCHAR(50),
    created_at TIMESTAMPTZ DEFAULT NOW()
);
